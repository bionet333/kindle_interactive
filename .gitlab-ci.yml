# GitLab CI/CD pipeline for building the Tauri application for multiple platforms.
# This pipeline builds for Linux, Windows, macOS, and Android on pushes to the main branch
# and on new tags, and creates a GitLab Release when a new tag is pushed.

stages:
  - build
  - release

variables:
  # Use a specific Rust version for consistency across runners.
  RUST_VERSION: "1.78.0"
  # Use a specific Node.js LTS version.
  NODE_VERSION: "20"
  # Cache directories to speed up subsequent builds.
  CARGO_HOME: "${CI_PROJECT_DIR}/.cargo"
  NPM_CONFIG_CACHE: "${CI_PROJECT_DIR}/.npm"

# --- Build Jobs ---

# Template for setting up the build environment on Debian-based systems.
.setup_template_linux: &setup_template_linux
  before_script:
    # Use a non-interactive frontend to prevent apt-get from asking questions.
    - export DEBIAN_FRONTEND=noninteractive
    # Install Rust via rustup.
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION}
    - export PATH="${CARGO_HOME}/bin:${PATH}"
    # Install Node.js using nvm (Node Version Manager).
    - apt-get update && apt-get install -y curl ca-certificates
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION} && nvm use ${NODE_VERSION}
    # Install Tauri's system dependencies for Linux (Debian/Ubuntu).
    - apt-get update && apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
    # Install frontend build tool (Trunk) and Tauri CLI via cargo.
    - cargo install trunk
    - cargo install tauri-cli

build_linux:
  stage: build
  image: debian:bullseye
  cache:
    key: linux-cache
    paths:
      - .cargo/
      - .npm/
      - src-tauri/target/
  <<: *setup_template_linux
  script:
    - cargo tauri build --verbose
  artifacts:
    paths:
      - "src-tauri/target/release/bundle/appimage/*.AppImage"
      - "src-tauri/target/release/bundle/deb/*.deb"
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

build_windows:
  stage: build
  tags:
    - windows # Assumes a GitLab runner on Windows with this tag.
  cache:
    key: windows-cache
    paths:
      - .cargo/
      - .npm/
      - src-tauri/target/
  before_script:
    # Install Rust via rustup-init.exe for Windows.
    - Invoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile rustup-init.exe
    - ./rustup-init.exe -y --default-toolchain %RUST_VERSION%
    - $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User')
    # Install Node.js using Chocolatey package manager.
    - choco install nodejs.install --version=%NODE_VERSION% -y
    # Install required WebView2 runtime.
    - Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'MicrosoftEdgeWebview2Setup.exe'
    - Start-Process -FilePath './MicrosoftEdgeWebview2Setup.exe' -Args '/silent /install' -Wait
    # Install Trunk and Tauri CLI.
    - cargo install trunk
    - cargo install tauri-cli
  script:
    - cargo tauri build --verbose
  artifacts:
    paths:
      - "src-tauri/target/release/bundle/msi/*.msi"
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

build_macos:
  stage: build
  tags:
    - macos # Assumes a GitLab runner on macOS with this tag.
  cache:
    key: macos-cache
    paths:
      - .cargo/
      - .npm/
      - src-tauri/target/
  before_script:
    # Install Rust.
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION}
    - export PATH="${HOME}/.cargo/bin:${PATH}"
    # Install Node.js using Homebrew and nvm.
    - brew install nvm
    - export NVM_DIR="$HOME/.nvm" && [ -s "$(brew --prefix nvm)/nvm.sh" ] && \. "$(brew --prefix nvm)/nvm.sh" && nvm install ${NODE_VERSION} && nvm use ${NODE_VERSION}
    # Install Trunk & Tauri CLI.
    - cargo install trunk
    - cargo install tauri-cli
  script:
    - cargo tauri build --verbose
  artifacts:
    paths:
      - "src-tauri/target/release/bundle/dmg/*.dmg"
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

build_android:
  stage: build
  image: rust:latest # NOTE: A proper image with Android SDK/NDK is required for this to work.
  cache:
    key: android-cache
    paths:
      - .cargo/
      - .npm/
      - src-tauri/target/
  before_script:
    # This is a conceptual setup. A real pipeline would use a pre-built Docker image
    # with the Android SDK and NDK correctly configured.
    - apt-get update && apt-get install -y build-essential openjdk-17-jdk curl wget unzip
    - echo " conceptually installing Android SDK, NDK, and setting env vars..."
    # Example: export ANDROID_HOME="/opt/android-sdk"
    # Example: export NDK_HOME="/opt/android-sdk/ndk/25.2.9519653"
    # Install required Rust targets for Android.
    - rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
    # Install Tauri Android tooling.
    - cargo install tauri-cli cargo-ndk
  script:
    - echo "Skipping Android build as it requires a full SDK setup."
    # - cargo tauri android build --verbose
  artifacts:
    paths:
      - "src-tauri/gen/android/app/build/outputs/apk/release/*.apk"
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'
  allow_failure: true # Allow this job to fail without blocking the pipeline.


# --- Release Job ---

# This job runs only when a new tag is pushed. It creates a formal Release in GitLab.
create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [] # No need to download artifacts, they are linked to the pipeline.
  script:
    - echo "Creating a release for tag ${CI_COMMIT_TAG}"
    - |
      release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name "${CI_COMMIT_TAG}" \
        --description "Automated release created by GitLab CI. Find the build artifacts for this tag in the 'build' stage jobs of this pipeline."
  rules:
    - if: '$CI_COMMIT_TAG'
